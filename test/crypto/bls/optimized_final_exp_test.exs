defmodule Tezex.Crypto.BLS.OptimizedFinalExpTest do
  use ExUnit.Case

  alias Tezex.Crypto.BLS.Fq12

  describe "optimized final exponentiation" do
    test "matches known results for test vector 1" do
      input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

      expected = [
        1_565_770_805_593_483_334_740_033_720_056_239_251_891_003_086_862_123_447_303_846_180_265_065_947_791_270_144_646_640_507_709_182_700_934_648_531_018_371,
        3_761_181_558_896_926_562_518_743_792_862_190_057_312_404_791_985_904_111_737_810_570_470_116_339_165_679_612_197_633_826_667_149_010_514_235_469_705_822,
        2_172_445_552_423_636_405_668_361_441_500_868_630_352_941_319_817_858_303_120_229_971_070_353_311_874_682_633_424_946_970_638_369_511_393_250_203_581_209,
        1_637_628_371_351_057_383_852_607_647_516_041_107_258_191_279_004_458_255_348_501_557_982_495_908_471_949_624_297_076_243_263_151_908_986_878_243_877_840,
        2_767_021_143_801_548_053_730_089_536_526_177_003_654_175_667_438_210_810_628_727_884_336_723_173_932_912_887_243_387_618_284_799_176_147_114_440_160_578,
        76_258_773_250_001_726_312_095_751_242_930_035_228_727_981_785_544_299_836_405_499_935_206_995_927_251_709_883_151_220_156_520_884_423_580_035_559_912,
        771_084_045_614_206_124_417_532_040_652_860_864_868_622_088_028_055_619_881_516_583_589_946_890_884_685_815_527_275_399_260_234_894_254_093_581_735_094,
        2_424_691_780_023_488_826_558_669_487_682_357_945_266_946_131_270_761_011_204_152_527_519_809_636_500_021_122_317_253_318_251_411_699_685_842_910_740_717,
        1_395_593_207_668_658_360_540_991_328_934_684_679_438_288_613_720_238_615_055_983_176_836_203_215_697_969_378_001_198_599_512_276_434_816_830_505_000_913,
        2_545_670_972_278_621_802_854_967_086_767_280_357_505_629_742_706_337_577_323_937_538_006_703_582_877_235_878_291_310_070_660_234_655_894_687_309_093_431,
        2_463_276_713_424_541_798_218_288_273_347_423_241_629_233_568_397_114_436_521_564_859_538_244_862_170_311_209_841_031_724_882_152_688_206_432_053_867_747,
        3_046_000_863_836_088_893_463_790_360_432_401_172_581_384_534_154_593_655_754_064_183_669_015_268_976_687_736_497_630_687_765_388_187_638_248_960_395_918
      ]

      input_fq12 = Fq12.from_integers(input)
      result = Fq12.optimized_final_exponentiation(input_fq12)
      expected_fq12 = Fq12.from_integers(expected)

      assert Fq12.eq?(result, expected_fq12)
    end

    test "matches known results for test vector 2" do
      input = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

      expected = [
        3_175_952_546_402_343_827_157_681_035_299_693_506_866_799_532_438_280_057_964_437_249_982_845_241_258_929_482_666_549_180_627_040_127_775_428_486_047_359,
        543_724_150_812_453_429_874_716_326_907_257_078_799_612_609_997_239_565_498_519_431_179_547_902_684_241_351_373_015_916_480_923_430_360_758_505_885_282,
        1_757_097_995_296_065_999_273_464_855_345_888_956_921_452_219_871_749_654_418_184_801_498_592_623_860_238_086_724_849_932_798_316_761_818_352_336_884_000,
        459_755_648_294_186_315_118_148_080_781_901_872_093_836_890_920_011_585_182_420_209_774_901_664_826_847_422_127_818_888_857_605_794_194_684_972_057_313,
        3_341_876_501_439_517_282_231_076_607_687_196_002_024_795_175_877_477_759_441_165_716_820_865_215_810_394_717_268_231_508_669_060_683_689_842_685_578_875,
        3_977_072_163_128_273_719_914_035_031_111_611_438_253_696_881_723_977_227_878_470_759_141_262_496_364_145_554_550_519_287_382_543_542_125_399_354_553_523,
        1_981_984_666_539_308_534_504_815_444_815_554_271_437_414_609_552_494_921_292_975_166_021_819_359_978_646_134_925_689_484_100_308_798_467_388_485_058_937,
        3_812_870_633_699_711_593_937_028_800_350_682_746_044_449_436_144_227_570_421_576_367_364_339_538_240_375_821_536_922_456_612_473_315_923_506_409_580_467,
        2_941_769_962_594_448_968_993_024_704_324_907_158_735_248_584_997_151_557_634_027_933_085_962_694_147_225_474_380_568_525_143_315_477_644_519_510_341_266,
        2_021_013_527_875_719_839_726_167_410_639_727_236_532_928_643_580_437_123_054_661_310_539_005_709_706_625_009_481_429_439_756_593_058_986_789_273_538_675,
        2_372_338_157_143_111_851_895_962_905_751_990_912_658_738_073_106_775_310_086_096_775_526_038_588_005_021_816_266_162_374_621_672_771_810_247_584_377_238,
        855_956_307_651_427_604_697_264_820_725_580_896_113_213_646_938_476_255_194_837_667_095_590_512_547_236_879_588_801_661_891_426_253_258_453_018_288_967
      ]

      input_fq12 = Fq12.from_integers(input)
      result = Fq12.optimized_final_exponentiation(input_fq12)
      expected_fq12 = Fq12.from_integers(expected)

      assert Fq12.eq?(result, expected_fq12)
    end

    test "identity element maps to identity" do
      input = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      expected = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

      input_fq12 = Fq12.from_integers(input)
      result = Fq12.optimized_final_exponentiation(input_fq12)
      expected_fq12 = Fq12.from_integers(expected)

      assert Fq12.eq?(result, expected_fq12)
    end

    test "basis element [0,1,0,...] final exponentiation" do
      input = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      expected = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

      input_fq12 = Fq12.from_integers(input)
      result = Fq12.optimized_final_exponentiation(input_fq12)
      expected_fq12 = Fq12.from_integers(expected)

      assert Fq12.eq?(result, expected_fq12)
    end
  end

  describe "frobenius endomorphism" do
    test "frobenius of identity is identity" do
      input = Fq12.one()
      result = Fq12.frobenius(input)
      assert Fq12.eq?(result, input)
    end

    test "frobenius applied 12 times is identity" do
      input = Fq12.from_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
      result = Enum.reduce(1..12, input, fn _i, acc -> Fq12.frobenius(acc) end)
      assert Fq12.eq?(result, input)
    end
  end
end
